package elections;
import elections.Vote;
import elections.Count;
import java.util.Vector;

public class MultiThreadVote {
    public static void main(String[] args) {
        Vector votevec = new Vector(240);   // creating a vote array for 240 votes

        Vote a = new Vote(1, votevec);
a.start();

        Vote b = new Vote(2, votevec);
b.start();

        Vote c = new Vote(3, votevec);
c.start();

try{
a.join();
b.join();
c.join();
System.out.println("Voting has ended!");
}catch(Exception e){System.out.println(e);}

        Count ac = new Count(1, votevec);
        Count bc = new Count(2, votevec);
        Count cc = new Count(3, votevec);

ac.start();
bc.start();
cc.start();

try{
ac.join();
bc.join();
cc.join();
System.out.println("Counting has ended!");
}catch(Exception e){System.out.println(e);}

        int av = ac.count;
        int bv = bc.count;
        int cv = cc.count;

System.out.println("elections.Vote Vector:" + "\n" + votevec);
System.out.println(av + " votes for A");
System.out.println(bv + " votes for B");
System.out.println(cv + " votes for C");

if(av>= bv&&av>= cv){
if(av == bv || av == cv)
System.out.println("Tie in elections!");
            else
System.out.println("A has won the elections!");
        }
        else if(bv>= av&&bv>= cv){
if(av == bv || bv == cv)
System.out.println("Tie in elections!");
            else
System.out.println("B has won the elections!");
        }
        else if(cv >= av&& cv >= bv){
if(cv == bv || cv == av)
System.out.println("Tie in elections!");
            else
System.out.println("C has won the elections!");
        }
    }
}
Vote.java
package elections;
import java.util.Random;
import java.util.Vector;
public class Vote extends Thread{
    Random rand = new Random();                      
    int max = 750;                                   
    int min = 100;                                   
    int v, s;
    Vector vec;
    public Vote(int v, Vector vec)
    {
this.v = v;
this.vec = vec;
    }
    public void run() {
        try
        {
            while(vec.size() < 240) {               
System.out.println(this.getName() + " is Voting");
vec.add(v);
                s = rand.nextInt((max - min) + 1) + min;
System.out.println(this.getName() + " is sleeping for " + s);
Thread.sleep(s);                    
            }
        }
catch(InterruptedException e)
        {
System.out.println("Voting Exception: " + e);
        }
    }
}
Count.java
package elections;
import java.util.Vector;
public class Count extends Thread{
    Vector vec;
    int k, i;
    public int count = 0;
    public Count(int k, Vector vec){
this.k = k;
this.vec = vec;
    }
    public void run(){
for(i = 0; i<vec.capacity(); i++){
            if(vec.elementAt(i).equals(k))            
                count++;
        }
    }
}

